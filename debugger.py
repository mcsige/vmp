import sys
import os
import queue
from compiler import Compiler

class Debugger:
    def __init__(self,bp = []):    
        self.opcodes = [24, 1, 0, 58, 16, 0, 0, 24, 1, 1, 219, 30, 0, 0, 24, 0, 3, 0, 24, 1, 5, 66, 207, 116, 1, 27, 4, 3, 6, 0, 4, 4, 5, 28, 3, 4, 2, 1, 3, 3, 4, 0, 0, 0, 23, 0, 1, 3, 20, 25, 16, 0, 0, 14, 58, 16, 0, 0, 76, 15, 111, 1, 66, 239, 116, 0, 98, 206, 117, 33, 64, 206, 84, 2, 67, 239, 112, 0, 98, 202, 117, 33, 68, 206, 84, 6, 67, 239, 124, 0, 98, 198, 117, 33, 72, 206, 84, 10, 67, 239, 120, 0, 98, 194, 117, 33, 76, 206, 84, 14, 67, 239, 100, 0, 85, 207, 116, 1, 82, 179, 100, 1, 66, 206, 105, 33, 83, 206, 106, 1, 92, 209, 116, 28, 90, 207, 106, 0, 70, 207, 116, 31, 66, 205, 117, 1, 66, 199, 116, 1, 66, 215, 116, 28, 66, 239, 101, 23, 66, 207, 116, 17, 128, 223, 116, 1, 90, 207, 112, 28, 79, 206, 112, 5, 65, 207, 116, 1, 94, 207, 112, 3, 67, 207, 116, 9, 66, 207, 116, 30, 95, 208, 106, 0, 95, 215, 117, 1, 1, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 45, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 44, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 37, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 48, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 35, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 54, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 55, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 46, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 35, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 54, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 43, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 45, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 44, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 49, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 99, 207, 116, 1, 77, 240, 100, 1, 66, 215, 117, 1, 72, 207, 116, 1, 77, 240, 100, 1, 66, 206, 105, 28, 90, 206, 116, 82, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 110, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 115, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 115, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 120, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 45, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 33, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 118, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 115, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 110, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 111, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 102, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 33, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 113, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 96, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 114, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 114, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 118, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 110, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 115, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 101, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 32, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 11, 66, 207, 116, 14, 125, 223, 116, 1, 67, 210, 105, 31, 66, 198, 106, 1, 72, 215, 116, 11, 66, 215, 117, 0, 92, 207, 116, 1, 90, 206, 116, 5, 66, 207, 116, 14, 194, 223, 116, 1, 90, 207, 125, 1, 90, 206, 117, 5, 66, 207, 116, 25, 67, 207, 112, 1, 66, 207, 123, 129, 82, 207, 116, 25, 66, 202, 116, 25, 67, 209, 137, 1, 66, 207, 104, 4, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 70, 207, 116, 1, 90, 207, 116, 4, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 76, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 124, 1, 66, 207, 108, 1, 66, 202, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 23, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 78, 207, 116, 1, 90, 207, 116, 4, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 13, 207, 116, 1, 94, 206, 106, 25, 67, 209, 249, 1, 66, 207, 104, 8, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 70, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 45, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 124, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 116, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 78, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 102, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 100, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 236, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 86, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 62, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 108, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 100, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 94, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 82, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 84, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 232, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 102, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 34, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 92, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 115, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 110, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 82, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 68, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 255, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 118, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 33, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 76, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 100, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 126, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 82, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 52, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 232, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 6, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 34, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 60, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 115, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 14, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 82, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 36, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 241, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 22, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 35, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 44, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 101, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 30, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 126, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 20, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 214, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 38, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 35, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 28, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 127, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 46, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 82, 207, 116, 1, 94, 206, 106, 25, 67, 209, 117, 1, 66, 207, 112, 0, 92, 209, 4, 1, 66, 207, 108, 1, 66, 198, 118, 1, 92, 209, 116, 25, 66, 206, 106, 25, 67, 209, 228, 1, 66, 207, 104, 0, 92, 215, 117, 31, 67, 207, 116, 1, 70, 206, 106, 31, 54, 207, 116, 1, 90, 207, 116, 8, 64, 207, 106, 31, 66, 215, 116, 0, 92, 215, 117, 31, 53, 207, 116, 1, 94, 206, 106, 25, 67, 204, 116, 1, 66, 207, 122, 199, 85, 207, 116, 15, 58, 215, 116, 1, 90, 206, 117, 1, 66, 207, 116, 25, 67, 205, 116, 1, 66, 207, 122, 97, 90, 207, 116, 25, 66, 209, 118, 5, 67, 209, 106, 5, 66, 207, 116, 25, 66, 207, 126, 3, 66, 209, 106, 1, 90, 207, 119, 31, 89, 203, 119, 4, 67, 207, 119, 3, 70, 207, 116, 1, 90, 207, 106, 2, 70, 206, 106, 31, 70, 207, 116, 1, 90, 207, 116, 4, 64, 207, 106, 31, 66, 215, 116, 2, 92, 212, 119, 2, 68, 207, 112, 5, 65, 215, 116, 31, 64, 203, 117, 31, 92, 203, 116, 1, 66, 215, 116, 1, 75, 205, 116, 31, 92, 207, 108, 1, 65, 209, 111, 2, 65, 215, 116, 31, 70, 215, 116, 1, 65, 216, 116, 31, 66, 218, 37, 25, 66, 207, 122, 89, 90, 207, 116, 25, 67, 206, 117, 1, 66, 207, 118, 0, 64, 205, 117, 1, 66, 207, 108, 1, 65, 206, 108, 1, 92, 205, 108, 0, 66, 209, 116, 1, 66, 216, 116, 31, 66, 222, 173, 22, 66, 207, 98, 1, 65, 204, 97, 83, 91, 207, 116, 25, 67, 207, 55, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 27, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 26, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 19, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 6, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 21, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 0, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 1, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 24, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 21, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 0, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 29, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 27, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 26, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 7, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 85, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 126, 1, 66, 207, 123, 62, 82, 207, 116, 15, 36, 213, 116, 1, 90, 206, 116, 82, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 110, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 115, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 115, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 120, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 45, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 33, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 118, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 115, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 110, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 111, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 102, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 33, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 113, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 96, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 114, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 114, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 118, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 110, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 115, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 101, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 32, 66, 207, 116, 14, 125, 223, 116, 1, 90, 206, 116, 11, 66, 207, 116, 14, 125, 223, 116, 1, 93, 197, 107, 8, 67, 210, 105, 25, 67, 207, 36, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 24, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 17, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 21, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 7, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 17, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 84, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 17, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 26, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 0, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 17, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 6, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 84, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 13, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 27, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 1, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 6, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 84, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 4, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 21, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 7, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 7, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 3, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 27, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 6, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 16, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 78, 1, 66, 207, 123, 62, 82, 207, 116, 25, 67, 207, 84, 1, 66, 207, 123, 62, 82, 207, 116, 0, 95, 210, 106, 1, 75, 209, 116, 11, 92, 207, 127, 14, 47, 213, 116, 1, 90, 206, 117, 31, 66, 207, 116, 25, 67, 207, 112, 1, 66, 207, 123, 129, 82, 207, 116, 25, 66, 196, 116, 15, 173, 212, 116, 1, 76, 181, 105, 1, 66, 215, 117, 8, 66, 207, 116, 1, 76, 169, 105, 1, 66, 215, 116, 31, 75, 203, 117, 31, 92, 203, 116, 1, 66, 215, 116, 1, 73, 205, 116, 31, 92, 207, 108, 1, 72, 209, 123, 74, 82, 207, 116, 25, 66, 206, 116, 29, 72, 206, 111, 0, 72, 215, 116, 31, 67, 215, 117, 1, 72, 207, 116, 1, 85, 207, 106, 1, 82, 243, 104, 1, 66, 193, 42, 28, 66, 207, 108, 0, 66, 156, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 160, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 189, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 189, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 182, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 227, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 239, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 184, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 189, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 160, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 161, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 168, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 239, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 191, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 174, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 188, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 188, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 184, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 160, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 189, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 171, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 238, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 197, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 207, 116, 1, 66, 208, 127, 30, 72, 208, 125, 0, 64, 206, 125, 8, 67, 207, 116, 1, 90, 207, 106, 8, 90, 206, 116, 31, 66, 207, 116, 22, 66, 209, 116, 16, 185, 212, 116, 1, 77, 132, 100, 1, 66, 215, 116, 0, 66, 215, 116, 31, 67, 215, 117, 1, 72, 207, 116, 1, 85, 207, 106, 1, 87, 83, 105, 1, 66, 193, 202, 31, 66, 207, 108, 0, 66, 156, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 160, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 189, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 189, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 182, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 227, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 239, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 184, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 189, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 160, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 161, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 168, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 239, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 191, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 174, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 188, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 188, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 184, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 160, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 189, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 171, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 238, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 197, 116, 1, 66, 192, 75, 17, 66, 207, 108, 0, 66, 207, 116, 1, 66, 208, 127, 30, 72, 208, 125, 0, 90, 207, 116, 10, 77, 102, 102, 1, 66, 215, 117, 1, 66, 207, 116, 1, 93, 196, 107, 11, 93, 198, 117, 28, 95, 215, 108, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        self.data = {}
        self.rip = 0
        self.rip0 = 0
        self.ripj = -1
        self.err_code = 'wrong analyse at %s'
        self.cs = 0x1000
        self.ds = 0xf000
        self.flag = 0
        self.stack = []
        self.reg = [0]*32
        self.magic = 0x10000
        self.buffer = queue.Queue()
        self.runcode = []
        self.exe_cmd = ['regs','stack','quit','run','continue','opcode','data']

    def syscall(self,order):
        if order==0:
            print(chr(self.reg[0]),end='')
        elif order==4:
            if self.buffer.empty():
                x = input()
                for i in x:
                    self.buffer.put(ord(i))
                self.buffer.put(ord('\n'))
            else:
                self.reg[0] = self.buffer.get()
        elif order==0x11:
            t = self.magic
            self.magic+=self.reg[0]
            self.reg[0] = t

    def dword(self,p):
        s = 0
        for i in range(4):
            s+=self.opcodes[self.rip+p+i]*256**i
        return s

    def alu(self,test = False,name = 'add'):
        sign = self.opcodes[self.rip+1]
        self.rip0 = self.rip
        s = ''
        ss = ' '
        op = '+'
        if name=='add':
            op = '+'
        elif name=='sub' or name=='cmp':
            op = '-'
        elif name=='mul':
            op = '*'
        elif name=='div':
            op = '/'
        elif name=='xor':
            op = '^'
        elif name=='and' or name=='test':
            op = '&'
        elif name=='or':
            op = '|'
        elif name=='shl':
            op = '<<'
        elif name=='shr':
            op = '>>'
        a = 0
        b = 0
        if not test:
            off = self.opcodes[self.rip+2]
            ss += 'reg%d,'%off
            self.rip+=1
        if sign==0:
            a = self.reg[self.opcodes[self.rip+2]]
            b = self.reg[self.opcodes[self.rip+3]]
            s = '{}{}reg{},reg{}'.format(name,ss,self.opcodes[self.rip+2],self.opcodes[self.rip+3])
            self.rip+=4
        elif sign==1:
            a = self.reg[self.opcodes[self.rip+2]]
            b = self.dword(3)
            s = '{}{}reg{},{}'.format(name,ss,self.opcodes[self.rip+2],hex(b))
            self.rip+=7
        elif sign==2:
            a = self.dword(2)
            b = self.reg[self.opcodes[self.rip+6]]
            s = '{}{}{},reg{}'.format(name,ss,hex(a),self.opcodes[self.rip+6])
            self.rip+=7
        elif sign==4:
            a = self.dword(2)
            b = self.dword(6)
            s = '{}{}{},{}'.format(name,ss,hex(a),hex(b))
            self.rip+=10
        else:
            self.wrong()
        if test:
            self.flag = eval('{}{}{}'.format(a,op,b))
        else:
            self.reg[off] = eval('{}{}{}'.format(a,op,b))
        return(s)

    def log(self,out = 'hex'):
        f = open(os.path.join(sys.path[0],out),'w')
        f.writelines(i+'\n' for i in self.runcode)
        f.close()
    
    def wrong(self):
        print(self.err_code %hex(self.cs+self.rip0))
        exit(0)

    def run(self,bp = []):
        bp = [i-self.cs for i in bp]
        while self.opcodes[self.rip]!=0x1d:
            self.rip0 = self.rip
            self.ripj = -1
            s = ''
            if self.opcodes[self.rip]==0:
                s = 'nop'
                self.rip+=1
            elif self.opcodes[self.rip]==1:
                s = 'ret'
                self.ripj = self.rip+1
                self.rip = self.stack.pop()
            elif self.opcodes[self.rip]==2:
                s = self.alu(False,'add')
            elif self.opcodes[self.rip]==3:
                s = self.alu(False,'sub')
            elif self.opcodes[self.rip]==4:
                s = self.alu(False,'mul')
            elif self.opcodes[self.rip]==5:
                s = self.alu(False,'div')
            elif self.opcodes[self.rip]==6:
                s = self.alu(False,'xor')
            elif self.opcodes[self.rip]==7:
                s = 'neg reg{},reg{}'.format(self.opcodes[self.rip+1],self.opcodes[self.rip+2])
                self.reg[self.opcodes[self.rip+1]] = -self.reg[self.opcodes[self.rip+2]]
                self.rip+=3
            elif self.opcodes[self.rip]==8:
                s = 'not reg{},reg{}'.format(self.opcodes[self.rip+1],self.opcodes[self.rip+2])
                self.reg[self.opcodes[self.rip+1]] = ~self.reg[self.opcodes[self.rip+2]]
                self.rip+=3
            elif self.opcodes[self.rip]==9:
                s = self.alu(False,'and')
            elif self.opcodes[self.rip]==0xa:
                s = self.alu(False,'or')
            elif self.opcodes[self.rip]==0xb:
                s = 'isz reg{},reg{}'.format(self.opcodes[self.rip+1],self.opcodes[self.rip+2])
                self.reg[self.opcodes[self.rip+1]] = self.reg[self.opcodes[self.rip+2]]==0
                self.rip+=3
            elif self.opcodes[self.rip]==0xc:
                s = self.alu(False,'shl')
            elif self.opcodes[self.rip]==0xd:
                s = self.alu(False,'shr')
            elif self.opcodes[self.rip]==0xe:
                s = 'jmp {}'.format(hex(self.dword(1)))
                self.ripj = self.rip+5
                self.rip = self.dword(1)-self.cs
            elif self.opcodes[self.rip]==0xf:
                s = 'call {}'.format(hex(self.dword(1)))
                self.ripj = self.rip+5
                self.stack.append(self.rip+5)
                self.rip = self.dword(1)-self.cs
            elif self.opcodes[self.rip]==0x10:
                s = 'jz {}'.format(hex(self.dword(1)))
                self.ripj = self.rip+5
                if self.flag==0:
                    self.rip = self.dword(1)-self.cs
                else:
                    self.rip+=5
            elif self.opcodes[self.rip]==0x11:
                s = 'jl {}'.format(hex(self.dword(1)))
                self.ripj = self.rip+5
                if self.flag<0:
                    self.rip = self.dword(1)-self.cs
                else:
                    self.rip+=5
            elif self.opcodes[self.rip]==0x12:
                s = 'jle {}'.format(hex(self.dword(1)))
                self.ripj = self.rip+5
                if self.flag<=0:
                    self.rip = self.dword(1)-self.cs
                else:
                    self.rip+=5
            elif self.opcodes[self.rip]==0x13:
                s = 'jg {}'.format(hex(self.dword(1)))
                self.ripj = self.rip+5
                if self.flag>0:
                    self.rip = self.dword(1)-self.cs
                else:
                    self.rip+=5
            elif self.opcodes[self.rip]==0x14:
                s = 'jge {}'.format(hex(self.dword(1)))
                self.ripj = self.rip+5
                if self.flag>=0:
                    self.rip = self.dword(1)-self.cs
                else:
                    self.rip+=5
            elif self.opcodes[self.rip]==0x15:
                s = 'jnz {}'.format(hex(self.dword(1)))
                self.ripj = self.rip+5
                if self.flag!=0:
                    self.rip = self.dword(1)-self.cs
                else:
                    self.rip+=5
            elif self.opcodes[self.rip]==0x16:
                s = self.alu(True,'test')
            elif self.opcodes[self.rip]==0x17:
                s = self.alu(True,'cmp')
            elif self.opcodes[self.rip]==0x18:
                sign = self.opcodes[self.rip+1]
                if sign==1:
                    s = 'mov reg{},{}'.format(self.opcodes[self.rip+2],hex(self.dword(3)))
                    self.reg[self.opcodes[self.rip+2]] = self.dword(3)
                    self.rip+=7
                else:
                    s = 'mov reg{},reg{}'.format(self.opcodes[self.rip+2],self.opcodes[self.rip+3])
                    self.reg[self.opcodes[self.rip+2]] = self.reg[self.opcodes[self.rip+3]]
                    self.rip+=4
            elif self.opcodes[self.rip]==0x19:
                s = 'inc reg{}'.format(self.opcodes[self.rip+1])
                self.reg[self.opcodes[self.rip+1]]+=1
                self.rip+=2
            elif self.opcodes[self.rip]==0x1a:
                s = 'dec reg{}'.format(self.opcodes[self.rip+1])
                self.reg[self.opcodes[self.rip+1]]-=1
                self.rip+=2
            elif self.opcodes[self.rip]==0x1b:
                s = 'mov reg{},[reg{}]'.format(self.opcodes[self.rip+1],self.opcodes[self.rip+2])
                if self.reg[self.opcodes[self.rip+2]]<self.ds:
                    self.reg[self.opcodes[self.rip+1]] = self.dword(self.reg[self.opcodes[self.rip+2]]-self.cs-self.rip)
                else:
                    if self.data.get(self.reg[self.opcodes[self.rip+2]]-self.ds)==None:
                        self.reg[self.opcodes[self.rip+1]] = 0
                    else:
                        self.reg[self.opcodes[self.rip+1]] = self.data.get(self.reg[self.opcodes[self.rip+2]]-self.ds)
                self.rip+=3
            elif self.opcodes[self.rip]==0x1c:
                s = 'mov [reg{}],reg{}'.format(self.opcodes[self.rip+1],self.opcodes[self.rip+2])
                if self.reg[self.opcodes[self.rip+1]]<self.ds:
                    for i in range(4):
                        by = int.to_bytes(self.reg[self.opcodes[self.rip+2]],length=4,byteorder='little')
                        self.opcodes[self.reg[self.opcodes[self.rip+1]]-self.cs+i] = by[i]
                else:
                    self.data[self.reg[self.opcodes[self.rip+1]]-self.ds] = self.reg[self.opcodes[self.rip+2]]
                self.rip+=3
            elif self.opcodes[self.rip]==0x1d:
                s = 'exit'
                self.rip+=1
            elif self.opcodes[self.rip]==0x1e:
                sign = self.opcodes[self.rip+1]
                if sign==1:
                    s = 'push {}'.format(hex(self.dword(2)))
                    self.stack.append(self.dword(2))
                    self.rip+=6
                else:
                    s = 'push reg{}'.format(self.opcodes[self.rip+2])
                    self.stack.append(self.reg[self.opcodes[self.rip+2]])
                    self.rip+=3
            elif self.opcodes[self.rip]==0x1f:
                s = 'pop reg{}'.format(self.opcodes[self.rip+1])
                self.reg[self.opcodes[self.rip+1]] = self.stack.pop()
                self.rip+=2
            elif self.opcodes[self.rip]==0x20:
                s = 'syscall {}'.format(hex(self.opcodes[self.rip+1]))
                self.syscall(self.opcodes[self.rip+1])
                self.rip+=2
            else:
                self.wrong()
            hex_code = ''
            if self.ripj==-1:
                for i in range(self.rip0,self.rip):
                    hex_code+=str(hex(self.opcodes[i]))+' '
            else:
                for i in range(self.rip0,self.ripj):
                    hex_code+=str(hex(self.opcodes[i]))+' '
                self.ripj = -1
            self.runcode.append('{name: <8}{ase: <30}{hex}'.format(name=hex(self.cs+self.rip0),ase=s,hex=hex_code))
            if self.rip in bp:
                print()
                for i in range(len(self.runcode)-3,len(self.runcode)):
                    print(self.runcode[i])
                com = Compiler()
                com.opcodes = self.opcodes[self.rip:]
                com.cs = self.cs+self.rip
                com.run(3)
                print('------')
                for i in range(3):
                    print(com.comcode[i])
                self.cmd()
            if s == 'exit':
                exit(0)
        self.log()

    def cmd(self):
        while True:
            cmd0 = input('>>')
            cmd0 = cmd0.split(' ')
            cmd = []
            for i in cmd0:
                if i!='':
                    cmd.append(i)
            prob_cmd = []
            for i in self.exe_cmd:
                if i.startswith(cmd[0]):
                    prob_cmd.append(i)
            if len(prob_cmd)==1:
                cmd[0] = prob_cmd[0]
                if cmd[0]=='regs':
                    for i in range(32):
                        print('reg{} {}'.format(i,hex(self.reg[i])))
                    print('rip {}'.format(hex(self.cs+self.rip)))
                    print('flag {}'.format(hex(self.flag)))
                elif cmd[0]=='stack':
                    print(','.join(hex(c) for c in self.stack)+' -->')
                elif cmd[0]=='opcode':
                    print(' '.join([hex(i) for i in self.opcodes[self.rip:self.rip+10]]))
                elif cmd[0]=='continue':
                    break
                elif cmd[0]=='quit':
                    exit(0)
                else:
                    print('Unknown command')
            else:
                print('Do you mean the below cmd')
                print('\n'.join(prob_cmd))


""" 
mov reg[0],0x103a
mov reg[1],0x1edb
mov reg[3],reg[0]
mov reg[5],0x0174cf42
loc_1019:
mov reg[4],[reg[3]]
xor reg[4],reg[4],reg[5]
mov [reg[3]],reg[4]
add reg[3],reg[3],0x4
cmp reg[1],reg[3]
jle 0x1019
jmp 0x103a
loc_103a:
"""
